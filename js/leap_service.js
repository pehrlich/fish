// Generated by CoffeeScript 1.6.3
(function() {
  app.factory("LeapService", [
    function() {
      var activationAngle, balanceFactor, controller, engagedHandId, previousValidHandIds, speedFactor, state, zeroAngle;
      console.log("connecting");
      controller = new Leap.Controller();
      controller.on("connect", function() {
        return console.log("Successfully connected.");
      });
      controller.on("deviceDisconnected", function() {
        return console.log("A Leap device has been disconnected.");
      });
      previousValidHandIds = [];
      controller.on("frame", function() {
        var id, newValidHandIds, _i, _j, _len, _len1, _results;
        newValidHandIds = controller.lastValidFrame.hands.map(function(hand) {
          return hand.id;
        });
        for (_i = 0, _len = previousValidHandIds.length; _i < _len; _i++) {
          id = previousValidHandIds[_i];
          if (!newValidHandIds.includes(id)) {
            previousValidHandIds.remove(id);
            controller.emit('lostHand', id);
          }
        }
        _results = [];
        for (_j = 0, _len1 = newValidHandIds.length; _j < _len1; _j++) {
          id = newValidHandIds[_j];
          if (!previousValidHandIds.includes(id)) {
            previousValidHandIds.push(id);
            _results.push(controller.emit('foundHand', id));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      engagedHandId = void 0;
      controller.addStep(function(frame) {
        var hand, _i, _len, _ref;
        if (!engagedHandId) {
          _ref = frame.hands;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            hand = _ref[_i];
            if (hand.pointables.length > 1) {
              console.log('engaging hand', hand.id);
              engagedHandId = hand.id;
              controller.emit('engage', hand);
            }
          }
        }
        if (engagedHandId) {
          frame.activeHand = frame.hands.getById(engagedHandId);
          if (!frame.activeHand || frame.activeHand.pointables < 1) {
            console.log('disengaging hand', engagedHandId);
            engagedHandId = void 0;
            controller.emit('disengage', frame.activeHand);
            frame.activeHand = void 0;
          }
        }
        return frame;
      });
      window.PitchHandler = function() {
        var activationAngle, state, zeroAngle;
        zeroAngle = 0;
        activationAngle = 0.5;
        state = void 0;
        return this.setZeroAngle = function(angle) {
          return zeroAngle = angle;
        };
      };
      zeroAngle = 0.4;
      activationAngle = 0.4;
      state = void 0;
      Leap.Hand.prototype.adjustedPitch = function() {
        return this.pitch() - zeroAngle;
      };
      window.PitchHandler.prototype.onFrame = function(frame) {
        if (frame.activeHand) {
          if (state !== 'noseDown' && frame.activeHand.adjustedPitch() < -activationAngle) {
            state = 'noseDown';
            controller.emit('noseDown');
          } else if (state !== 'noseUp' && frame.activeHand.adjustedPitch() > activationAngle) {
            state = 'noseUp';
            controller.emit('noseUp');
          } else if (state !== 'noseSteady' && Math.abs(frame.activeHand.adjustedPitch()) < activationAngle) {
            state = 'noseSteady';
            controller.emit('noseSteady');
          }
        }
        return frame;
      };
      controller.addStep(window.PitchHandler.prototype.onFrame);
      speedFactor = 5;
      balanceFactor = 1;
      controller.addStep(function(frame) {
        if (frame.activeHand) {
          frame.baseFlapTime = 600 + (speedFactor * frame.activeHand.palmPosition[2]);
          frame.leftFlapTime = frame.baseFlapTime + (balanceFactor * frame.activeHand.palmPosition[0]);
          frame.rightFlapTime = frame.baseFlapTime - (balanceFactor * frame.activeHand.palmPosition[0]);
        }
        return frame;
      });
      controller.connect();
      return controller;
    }
  ]);

}).call(this);
